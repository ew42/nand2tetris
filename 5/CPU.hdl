// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //create PC register
    PC(in = aOut, load = pcload1, inc = true, reset = reset, out[0..14] = pc);

    //inM -> Mux16 -> ALU -> outM/alu0
    Mux16(a = aOut, b = inM, sel = instruction[12], out = mux0);
    ALU(x = dOut, y = mux0, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = alu0, out = outM, zr = zr0, ng = ng0);
    
    //create A register
    Not(in = instruction[15], out = not15);
    Or(a = not15, b = instruction[5], out = aLoad);
    Mux16(a = instruction, b = alu0, sel = instruction[15], out = aIn);
    Register(in = aIn, load = aLoad, out = aOut, out[0..14] = addressM);

    //create D register
    And(a = instruction[15], b = instruction[4], out = dIn);
    Register(in = alu0, load = dIn, out = dOut, out = DRegister);

    //writeM logic
    And(a = instruction[15], b = instruction[3], out = writeM);

    //gay PC load logic
    And(a = instruction[2], b = ng0, out = and0);
    And(a = instruction[1], b = zr0, out = and1);
    Not(in = ng0, out = ngg0);
    And(a = instruction[0], b = ngg0, out = and2);
    Not(in = zr0, out = nzr0);
    And(a = and2, b = nzr0, out = and3);
    Or(a = and0, b = and1, out = or0);
    Or(a = or0, b = and3, out = pcload0);
    And(a = pcload0, b = instruction[15], out = pcload1);

}